(function ($) {
  let constants = {
      classes: {
        zoomInTopLeaveActive: 'el-zoom-in-top-leave-active',
        zoomInTopEnter: 'el-zoom-in-top-enter',
        zoomInTopEnterActive: 'el-zoom-in-top-enter-active',
        isFocus: 'is-focus',
        cascader: 'cascader',
        elPopper: 'el-popper',
        popperArrow: 'popper__arrow',
        activePath: 'in-active-path',
        active: 'is-active',
      },

      defaultAttrs: {
        'type': 'text',
        'autocomplete': 'off',
        'readonly': 'readonly'
      },
      html: {
        dropdown: function (targetId, scrollbarWidth, scrollbarHeight) {
          return '' +
            '<i class="iconfont icon-arrow-up input-suffix"></i>' +
            '<div class="tree-select-dropdown el-popper" x-placement="bottom-start">' +
            '  <div class="popper__arrow"></div>' +
            '  <div class="tree-select-panel el-scrollbar" id="treeSelect_panel_' + targetId + '">' +
            '    <div class="tree-select-menu-wrap el-scrollbar__wrap" style="margin-right:' + scrollbarWidth + ';margin-bottom:' + scrollbarHeight + ';">' +
            '      <ul class="el-scrollbar__view ztree" id="treeSelect_' + targetId + '"></ul>' +
            '    </div>' +
            '    <div class="el-scrollbar__bar is-horizontal"><div class="el-scrollbar__thumb"></div></div>' +
            '    <div class="el-scrollbar__bar is-vertical"><div class="el-scrollbar__thumb"></div></div>' +
            '  </div>' +
            '</div>'
        }
      }
    },
    defaults = {
      // 节点数据中保存唯一标识的属性名称
      idKey: 'id',
      // 节点数据中保存其父节点唯一标识的属性名称
      pIdKey: 'pId',
      // 用于修正根节点父节点数据，即 pIdKey 指定的属性值
      rootPId: -1,
      // 是否禁用组件
      disabled: false,
      // 选项分隔符
      separator: ' / ',
      /**
       * 单击节点事件回调方法
       * @param event 节点event
       * @param node 节点数据
       */
      onClickNode: function (event, node) {
      }
    },
    // 以targetId为key存储选中节点的值
    checkedNodes = {},
    methods = {
      val: function (val) {
        if (val === undefined) {
          let values = [], config = this.config;
          $.each(checkedNodes[this.targetId], function (i, node) {
            values.push(node[config.idKey]);
          });
          return values;
        } else if (!$.isEmptyObject(val)) {
          let targetId = this.targetId;
          $('#' + targetId).siblings('.cascader-dropdown').css({'opacity': 0, 'display': 'block'});
          for (let i = 0; i < val.length; i++) {
            let $node = $('#cascader_panel_' + targetId).find('.cascader-node[data-id=' + val[i] + ']');
            if ($node.index() > 5) {
              $node.parents('.el-scrollbar__wrap').animate({scrollTop: 35 * ($node.index() - 3)}, 20);
            }
            $node.click();
          }
          setTimeout(function () {
            $('#' + targetId).siblings('.cascader-dropdown').css({'opacity': '', 'display': ''});
          }, 300)
        }
      },

      /**
       * 获取选中的节点数组
       * @param leafOnly
       * @returns {Object|Array}  是否只是叶子节点，默认值为 false
       */
      getCheckedNodes(leafOnly) {
        let nodes = checkedNodes[this.targetId];
        if (leafOnly === undefined || leafOnly === false) {
          return nodes || [];
        }
        if (!$.isEmptyObject(nodes)) {
          for (let i = nodes.length - 1; i >= 0; i--) {
            let node = nodes[i];
            if (!node.isParent) return node;
          }
        }
        return {};
      }
    };

  $.fn.extend({
    'treeSelect': function (options, data) {
      $(this).wrap('<div class="tree-select"></div>');
      if (typeof options !== 'object') return this;
      let $treeSelectInput = $(this), targetId = $treeSelectInput.attr('id'),
        classes = constants.classes,
        // key:nodeId val:此节点的子节点的对象集合{nodeId: node}
        optionIdsObj = {},
        // key:nodeId val:此节点的对象
        optionObj = {},
        html = constants.html, config = $.extend({}, defaults, options),
        // 级联组件对象，其中包含一些常用方法
        cascader = {targetId: targetId, config: config},
        scrollbarWidthAndHeight = getScrollBarWidthAndHeight(),
        scrollbarWidth = scrollbarWidthAndHeight[0],
        scrollbarHeight = scrollbarWidthAndHeight[1];
      $treeSelectInput.attr(constants.defaultAttrs).after(html.dropdown(targetId, -scrollbarWidth + 'px', -scrollbarHeight + 'px'));
      if (config.disabled) $treeSelectInput.attr('disabled', 'disabled');
      let $treeSelect = $treeSelectInput.parent('.tree-select'),
        $treeSelect_dropdown = $treeSelectInput.siblings('.tree-select-dropdown'),
        $cascader_panel = $('#cascader_panel_' + targetId);
      let setting = {
        view: {
          showIcon: false
        },
        data: {
          simpleData: {
            enable: true
          }
        },
        check: {
          enable: true
        }
      };
      $.fn.zTree.init($('#treeSelect_' + targetId), setting, data);
      let $scrollbar__wrap = $('#treeSelect_panel_' + targetId + ' .el-scrollbar__wrap'),
        $scrollbar__thumb = $('#treeSelect_panel_' + targetId + ' .el-scrollbar__bar.is-vertical .el-scrollbar__thumb'),
        wrapHeight = $scrollbar__wrap.height() - scrollbarHeight;
      initScrollbar(targetId, $scrollbar__wrap, $scrollbar__thumb, scrollbarHeight, wrapHeight);
      // 滚动条事件
      $scrollbar__wrap.on('scroll', function () {
        $scrollbar__thumb.css('transform', 'translateY(' + ($(this).scrollTop() / wrapHeight * 100) + '%)');
      });

      /**
       * 文本框单击事件绑定
       */
      $treeSelectInput.on('click', function () {
        if ($treeSelect.hasClass(classes.isFocus)) {
          closePanel($treeSelect, $treeSelect_dropdown)
        } else {
          adjustPanelDirection($treeSelectInput, $treeSelect_dropdown);
          $treeSelect_dropdown.addClass(classes.zoomInTopEnterActive).addClass(classes.zoomInTopEnter);
          $treeSelect.addClass(classes.isFocus);
          setTimeout(function () {
            $treeSelect_dropdown.removeClass(classes.zoomInTopEnter);
          }, 1);
          setTimeout(function () {
            $treeSelect_dropdown.removeClass(classes.zoomInTopEnterActive);
          }, 300);
        }
      });

      /**
       * 单击空白处关闭面板
       */
      $(document).on('click', function (e) {
        if (!$treeSelect.is(e.target) && $treeSelect.has(e.target).length === 0) {
          if ($treeSelect.hasClass(classes.isFocus)) {
            closePanel($treeSelect, $treeSelect_dropdown);
          }
        }
      });

      /**
       * 文本框父元素滚动监听，用于计算如何显示面板
       */
      $(document).scroll(function () {
        adjustPanelDirection($treeSelectInput, $treeSelectInput.siblings('.tree-select-dropdown'));
      });
      return $.extend({}, cascader, methods);
    }
  });

  /**
   * 调整面板方法
   * @param $this 下来文本框对象
   * @param $cascader_dropdown 下来面板对象
   */
  function adjustPanelDirection($this, $cascader_dropdown) {
    if ($this && $cascader_dropdown && $this.length > 0 && $cascader_dropdown.length > 0) {
      let bottom = $(window).height() - ($this.offset().top - $(document).scrollTop());
      if (bottom <= 250) {
        $cascader_dropdown.attr('x-placement', 'top-start');
      } else {
        $cascader_dropdown.attr('x-placement', 'bottom-start');
      }
    }
  }

  /**
   * 关闭面板
   * @param $cascader 组件最外级对象
   * @param $cascader_dropdown 下来面板对象
   */
  function closePanel($cascader, $cascader_dropdown) {
    if ($cascader && $cascader_dropdown && $cascader.length > 0 && $cascader_dropdown.length > 0) {
      $cascader_dropdown.addClass(constants.classes.zoomInTopLeaveActive);
      setTimeout(function () {
        $cascader_dropdown.removeClass(constants.classes.zoomInTopLeaveActive);
        $cascader.removeClass(constants.classes.isFocus);
      }, 300);
    }
  }

  /**
   * 初始化滚动条
   * @param targetId 级联组件id
   * @param $scrollbar__wrap 内容包裹对象
   * @param $scrollbar__thumb 竖向滚动条把手
   * @param scrollbarHeight 横向滚动条的高度
   * @param wrapHeight 包裹内容面板的高度，真实的高度是去除横向滚动条的高度；因为设置了margin-bottom=负的滚动条的高度
   */
  function initScrollbar(targetId, $scrollbar__wrap, $scrollbar__thumb, scrollbarHeight, wrapHeight) {
    // 内容的高度
    let viewHeight = $('#treeSelect_panel_' + targetId + ' .el-scrollbar__view')[0].scrollHeight;
    if (wrapHeight < viewHeight) $scrollbar__thumb.css('height', (wrapHeight / viewHeight * 100) + '%');
    setTimeout(function () {
      initScrollbar(targetId, $scrollbar__wrap, $scrollbar__thumb, scrollbarHeight, wrapHeight)
    }, 10)
  }

  /**
   * 获取滚动条宽度和高度
   * @returns {[number, number]} 0位：竖向滚动条宽度，1位：横向滚动条高度
   */
  function getScrollBarWidthAndHeight() {
    let el = document.createElement("p"),
      styles = {
        width: "100px",
        height: "100px",
        overflow: "scroll"
      };
    for (let i in styles) {
      el.style[i] = styles[i];
    }
    document.body.appendChild(el);
    let scrollBarWidth = el.offsetWidth - el.clientWidth,
      scrollBarHeight = el.offsetHeight - el.clientHeight;
    el.remove();
    return [scrollBarWidth, scrollBarHeight];
  }
})(jQuery);