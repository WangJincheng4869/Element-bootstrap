layer.config({
  offset: '100px',
  resize: false
});

$('#btn_success').on('click', function () {
  layer.msg('恭喜你，这是一条成功消息', {
    skin: 'layer-success',
  });
});
$('#btn_warning').on('click', function () {
  layer.msg('警告哦，这是一条警告消息', {
    skin: 'layer-error',
  });
});
$('#btn_msg').on('click', function () {
  layer.msg('这是一条消息提示');
});
$('#btn_error').on('click', function () {
  layer.msg('错了哦，这是一条错误消息', {
    skin: 'layer-error',
  });
});


$('#btn_alert').on('click', function () {
  layer.alert('我是一个alert');
});
$('#btn_confirm').on('click', function () {
  layer.confirm('您是如何看待前端开发？', {
    btn: ['重要', '奇葩'] //按钮
  }, function () {
    layer.msg('的确很重要', {
      offset: '100px'
    });
  }, function () {
    layer.msg('也可以这样', {
      time: 20000, //20s后自动关闭
      btn: ['明白了', '知道了']
    });
  });
});
$('#btn_open').on('click', function (e) {
  layer.open({
    type: 1,
    btn: ['按钮一', '按钮二', '按钮三'],
    content: '内容这里也可以写<b>html</b><br><i>要将允许拉伸关掉哦！</i>',
    success: function () {
      e.target.blur();
    }
  });
});

laydate.render({
  elem: '#inputDate',
  change: function (value, date) { //监听日期被切换
    lay('#testView').html(value);
  }
});

laydate.render({
  elem: '#inputDate_1',
  type: 'datetime',
  range: true //或 range: '~' 来自定义分割字符
});

let ticks = [], ticks_labels = [];
for (let i = 1; i <= 12; i++) {
  ticks.push(i);
  ticks_labels.push('<span>' + i + '</span>');
}

$('#input_range').slider({
  min: 1,
  max: 12,
  step: 1,
  value: 1,
  ticks: ticks,
  ticks_labels: ticks_labels
});

$('select').selectpicker();

(function ($) {
  let constants = {
      icons: {
        inputSuffix: '<i class="iconfont icon-arrow-up input-suffix"></i>',
        nodePostfix: '<i class="iconfont icon-arrow-up cascader-node-postfix"></i>',
        nodePrefix: '<i class="iconfont icon-check cascader-node-prefix"></i>',
      },

      classes: {
        zoomInTopLeaveActive: 'el-zoom-in-top-leave-active',
        zoomInTopEnter: 'el-zoom-in-top-enter',
        zoomInTopEnterActive: 'el-zoom-in-top-enter-active',
        isFocus: 'is-focus',
        cascader: 'cascader',
        elPopper: 'el-popper',
        popperArrow: 'popper__arrow',
        activePath: 'in-active-path',
        active: 'is-active',
      },

      html: {
        dropdown: function (targetId) {
          return '' +
            '<i class="iconfont icon-arrow-up input-suffix"></i>' +
            '<div class="cascader-dropdown el-popper" x-placement="bottom-start">' +
            '  <div class="popper__arrow"></div>' +
            '  <div class="cascader-panel" id="cascader_panel_' + targetId + '"></div>' +
            '</div>'
        },

        menu: function (menuitemHtml, level, targetId, scrollbarWidth, scrollbarHeight) {
          return '' +
            '<div class="el-scrollbar cascader-menu" role="menu" id="cascader_menu_' + targetId + '_' + level + '">' +
            '  <div class="cascader-menu-wrap el-scrollbar__wrap" style="margin-right:' + scrollbarWidth + ';margin-bottom:' + scrollbarHeight + ';">' +
            '    <ul class="el-scrollbar__view cascader-menu-list">' + menuitemHtml + '</ul>' +
            '  </div>' +
            '  <div class="el-scrollbar__bar is-horizontal"><div class="el-scrollbar__thumb"></div></div>' +
            '  <div class="el-scrollbar__bar is-vertical"><div class="el-scrollbar__thumb"></div></div>' +
            '</div>'
        },

        node: function (option) {
          let menuitem =
            '<li class="cascader-node" role="menuitem" data-id="' + option.id + '" data-index="' + option.index + '" data-level="' + option.level + '">' +
            '<span class="cascader-node-label">' + option.name + '</span>';
          if (option.isParent) {
            menuitem += constants.icons.nodePostfix;
          } else {
            menuitem += constants.icons.nodePrefix;
          }
          menuitem += '</li>';
          return menuitem;
        }
      }
    },
    defaults = {
      // 是否开启异步加载模式
      asyncEnable: false,
      // Ajax 的 http 请求模式
      type: 'post',
      // Ajax 提交参数的数据类型
      contentType: 'application/json;charset=UTF-8',
      // Ajax 请求提交的静态参数键值对
      otherParam: {},
      // 异步加载时需要自动提交父节点属性的参数
      autoParam: [],
      // Ajax 获取数据的 URL 地址
      url: '',
      // Ajax 获取的数据类型
      dataType: 'json',
      // 是否采用简单数据模式 (Array)
      simpleDataEnable: true,
      // 节点数据中保存唯一标识的属性名称
      idKey: 'id',
      // 节点数据中保存其父节点唯一标识的属性名称
      pIdKey: 'pId',
      // 用于修正根节点父节点数据，即 pIdKey 指定的属性值
      rootPId: -1
    };

  $.fn.extend({
    'cascader': function (options, data) {
      if (typeof options !== 'object') return this;
      let $this = $(this), targetId = $this.attr('id'),
        classes = constants.classes, icons = constants.icons, optionObj = {},
        html = constants.html, config = $.extend({}, defaults, options),
        scrollbarWidthAndHeight = getScrollBarWidthAndHeight(),
        scrollbarWidth = scrollbarWidthAndHeight[0],
        scrollbarHeight = scrollbarWidthAndHeight[1];
      $this.after(html.dropdown(targetId));
      let $cascader = $this.parent('.cascader'),
        $cascader_dropdown = $this.siblings('.cascader-dropdown'),
        $cascader_panel = $('#cascader_panel_' + targetId);
      if (!config.asyncEnable && data) {
        $.each(data, function (i, option) {
          let id = option[config.idKey], pId = option[config.pIdKey];
          if ($.isEmptyObject(optionObj[pId])) {
            optionObj[pId] = {};
          }
          optionObj[pId][id] = option;
        });
        console.log(optionObj);
        let nodeHtml = '';
        $.each(optionObj[config.rootPId], function (i, option) {
          option.isParent = !$.isEmptyObject(optionObj[option.id]);
          nodeHtml += html.node(option);
        });
        $cascader_panel.append(html.menu(nodeHtml, 1, targetId, -scrollbarWidth + 'px', -scrollbarHeight + 'px'));
      }
      /**
       * 文本框单击事件绑定
       */
      $this.on('click', function () {
        if ($cascader.hasClass(classes.isFocus)) {
          closePanel($cascader, $cascader_dropdown)
        } else {
          adjustPanelDirection($this, $cascader_dropdown);
          $cascader_dropdown.addClass(classes.zoomInTopEnterActive).addClass(classes.zoomInTopEnter);
          $cascader.addClass(classes.isFocus);
          setTimeout(function () {
            $cascader_dropdown.removeClass(classes.zoomInTopEnter);
          }, 1);
          setTimeout(function () {
            $cascader_dropdown.removeClass(classes.zoomInTopEnterActive);
          }, 300);
        }
      });

      /**
       * 选项单击事件
       */
      $cascader_dropdown.on('click', '.cascader-node', function () {
        let $this = $(this), id = parseInt($this.attr('data-id')),
          level = parseInt($this.attr('data-level')), nextLevel = level + 1;
        let nodeHtml = '';
        $.each(optionObj[id], function (i, option) {
          option.isParent = !$.isEmptyObject(optionObj[option.id]);
          nodeHtml += html.node(option);
        });
        // 判断是否为父级选项，而改变图标形态；是否需要加载下一级
        if ($.isEmptyObject(optionObj[id])) {
          $this.addClass(classes.active).siblings().removeClass(classes.active).removeClass(classes.activePath);
          $('#cascader_menu_' + targetId + '_' + level).nextAll().remove();
        } else {
          $this.addClass(classes.activePath).siblings().removeClass(classes.activePath).removeClass(classes.active);
          let $cascader_menu = $('#cascader_menu_' + targetId + '_' + nextLevel);
          if ($cascader_menu.length > 0) {
            $('#cascader_menu_' + targetId + '_' + nextLevel + ' .cascader-menu-list').html(nodeHtml);
          } else {
            $cascader_panel.append(html.menu(nodeHtml, nextLevel, targetId, -scrollbarWidth + 'px', -scrollbarHeight + 'px'));
          }
          $cascader_menu.nextAll().remove();
          let $scrollbar__wrap = $('#cascader_menu_' + targetId + '_' + nextLevel + ' .el-scrollbar__wrap'),
            $scrollbar__thumb = $('#cascader_menu_' + targetId + '_' + nextLevel + ' .el-scrollbar__bar.is-vertical .el-scrollbar__thumb'),
            // 真实的高度是去除横向滚动条的高度；因为设置了margin-bottom=负的滚动条的高度
            wrapHeight = $scrollbar__wrap.height() - scrollbarHeight,
            viewHeight = $('#cascader_menu_' + targetId + '_' + nextLevel + ' .el-scrollbar__view')[0].scrollHeight;
          if (wrapHeight < viewHeight) {
            $scrollbar__thumb.css('height', (wrapHeight / viewHeight * 100) + '%');
          }
          $scrollbar__wrap.on('scroll', function () {
            $scrollbar__thumb.css('transform', 'translateY(' + ($(this).scrollTop() / wrapHeight * 100) + '%)');
          });

          $scrollbar__thumb.on({
            'mousedown': function (e) {
              console.log('按下');
              $(document).on('mousemove', function (e) {
                console.log('滑动')
              })
            },
            'mouseup': function (e) {
              console.log('抬起');
              $(document).off('mousemove')
            },
          })
        }
      });

      /**
       * 单击空白处关闭面板
       */
      $(document).on('mouseup', function (e) {
        if (!$cascader.is(e.target) && $cascader.has(e.target).length === 0) {
          if ($cascader.hasClass(classes.isFocus)) {
            closePanel($cascader, $cascader_dropdown)
          }
        }
      });

      /**
       * 文本框父元素滚动监听，用于计算如何显示面板
       */
      $(document).scroll(function () {
        adjustPanelDirection($this, $this.siblings('.cascader-dropdown'));
      });
      return $this;
    }
  });

  /**
   * 调整面板方法
   * @param $this 下来文本框对象
   * @param $cascader_dropdown 下来面板对象
   */
  function adjustPanelDirection($this, $cascader_dropdown) {
    if ($this && $cascader_dropdown && $this.length > 0 && $cascader_dropdown.length > 0) {
      let bottom = $(window).height() - ($this.offset().top - $(document).scrollTop());
      if (bottom <= 250) {
        $cascader_dropdown.attr('x-placement', 'top-start');
      } else {
        $cascader_dropdown.attr('x-placement', 'bottom-start');
      }
    }
  }

  /**
   * 关闭面板
   * @param $cascader 组件最外级对象
   * @param $cascader_dropdown 下来面板对象
   */
  function closePanel($cascader, $cascader_dropdown) {
    if ($cascader && $cascader_dropdown && $cascader.length > 0 && $cascader_dropdown.length > 0) {
      $cascader_dropdown.addClass(constants.classes.zoomInTopLeaveActive);
      setTimeout(function () {
        $cascader_dropdown.removeClass(constants.classes.zoomInTopLeaveActive);
        $cascader.removeClass(constants.classes.isFocus);
      }, 300);
    }
  }

  function getScrollBarWidthAndHeight() {
    let el = document.createElement("p"),
      styles = {
        width: "20px",
        height: "20px",
        overflow: "scroll"
      };
    for (let i in styles) {
      el.style[i] = styles[i];
    }
    document.body.appendChild(el);
    let scrollBarWidth = el.offsetWidth - el.clientWidth,
      scrollBarHeight = el.offsetHeight - el.clientHeight;
    el.remove();
    return [scrollBarWidth, scrollBarHeight];
  }
})(jQuery);

let options = [{
  "id": 0,
  "parentId": -1,
  "name": "北京",
  "level": 1,
  "index": 0
}, {
  "id": 18,
  "parentId": -1,
  "name": "黑龙江省",
  "level": 1,
  "index": 1
}, {
  "id": 19,
  "parentId": 18,
  "name": "哈尔滨市",
  "level": 2,
  "index": 0
}, {
  "id": 1,
  "parentId": 0,
  "name": "丰台区",
  "level": 2,
  "index": 0
}, {
  "id": 10,
  "parentId": 0,
  "name": "海淀区",
  "level": 2,
  "index": 1
}, {
  "id": 50,
  "parentId": 18,
  "name": "绥化市",
  "level": 2,
  "index": 1
}, {
  "id": 11,
  "parentId": 10,
  "name": "三环以内",
  "level": 3,
  "index": 0
}, {
  "id": 2,
  "parentId": 1,
  "name": "四环到五环之间",
  "level": 3,
  "index": 0
}, {
  "id": 20,
  "parentId": 19,
  "name": "南岗区",
  "level": 3,
  "index": 0
}, {
  "id": 4,
  "parentId": 1,
  "name": "二环到三环",
  "level": 3,
  "index": 1
}, {
  "id": 12,
  "parentId": 10,
  "name": "三环到四环之间",
  "level": 3,
  "index": 1
}, {
  "id": 49,
  "parentId": 19,
  "name": "香坊区",
  "level": 3,
  "index": 1
}, {
  "id": 13,
  "parentId": 10,
  "name": "四环到五环之间",
  "level": 3,
  "index": 2
}, {
  "id": 5,
  "parentId": 1,
  "name": "三环到四环之间",
  "level": 3,
  "index": 2
}, {
  "id": 6,
  "parentId": 1,
  "name": "五环到六环之间",
  "level": 3,
  "index": 3
}, {
  "id": 14,
  "parentId": 10,
  "name": "五环到六环之间",
  "level": 3,
  "index": 3
}, {
  "id": 15,
  "parentId": 10,
  "name": "六环以外",
  "level": 3,
  "index": 4
}, {
  "id": 7,
  "parentId": 1,
  "name": "六环之外",
  "level": 3,
  "index": 4
}, {
  "id": 8,
  "parentId": 1,
  "name": "大红门街道",
  "level": 3,
  "index": 5
}, {
  "id": 16,
  "parentId": 10,
  "name": "西三旗街道",
  "level": 3,
  "index": 5
}, {
  "id": 17,
  "parentId": 10,
  "name": "西二旗",
  "level": 3,
  "index": 6
}, {
  "id": 9,
  "parentId": 1,
  "name": "东高地街道",
  "level": 3,
  "index": 6
}, {
  "id": 21,
  "parentId": 10,
  "name": "八里庄街道",
  "level": 3,
  "index": 7
}, {
  "id": 22,
  "parentId": 10,
  "name": "北太平庄街道",
  "level": 3,
  "index": 8
}, {
  "id": 23,
  "parentId": 10,
  "name": "北下关街道",
  "level": 3,
  "index": 9
}, {
  "id": 24,
  "parentId": 10,
  "name": "东升镇",
  "level": 3,
  "index": 10
}, {
  "id": 25,
  "parentId": 10,
  "name": "甘家口街道",
  "level": 3,
  "index": 11
}, {
  "id": 26,
  "parentId": 10,
  "name": "海淀街道",
  "level": 3,
  "index": 12
}, {
  "id": 27,
  "parentId": 10,
  "name": "花园路街道",
  "level": 3,
  "index": 13
}, {
  "id": 28,
  "parentId": 10,
  "name": "马连洼街道",
  "level": 3,
  "index": 14
}, {
  "id": 29,
  "parentId": 10,
  "name": "青龙桥街道",
  "level": 3,
  "index": 15
}, {
  "id": 30,
  "parentId": 10,
  "name": "清河街道",
  "level": 3,
  "index": 16
}, {
  "id": 31,
  "parentId": 10,
  "name": "清华园街道",
  "level": 3,
  "index": 17
}, {
  "id": 32,
  "parentId": 10,
  "name": "上地街道",
  "level": 3,
  "index": 18
}, {
  "id": 33,
  "parentId": 10,
  "name": "上庄镇",
  "level": 3,
  "index": 19
}, {
  "id": 34,
  "parentId": 10,
  "name": "曙光街道",
  "level": 3,
  "index": 20
}, {
  "id": 35,
  "parentId": 10,
  "name": "四季青镇",
  "level": 3,
  "index": 21
}, {
  "id": 36,
  "parentId": 10,
  "name": "苏家坨镇",
  "level": 3,
  "index": 22
}, {
  "id": 37,
  "parentId": 10,
  "name": "田村路街道",
  "level": 3,
  "index": 23
}, {
  "id": 38,
  "parentId": 10,
  "name": "万柳地区",
  "level": 3,
  "index": 24
}, {
  "id": 39,
  "parentId": 10,
  "name": "万寿路街道",
  "level": 3,
  "index": 25
}, {
  "id": 40,
  "parentId": 10,
  "name": "温泉镇",
  "level": 3,
  "index": 26
}, {
  "id": 41,
  "parentId": 10,
  "name": "西北旺镇",
  "level": 3,
  "index": 27
}, {
  "id": 42,
  "parentId": 10,
  "name": "香山街道",
  "level": 3,
  "index": 28
}, {
  "id": 43,
  "parentId": 10,
  "name": "学院路街道",
  "level": 3,
  "index": 29
}, {
  "id": 44,
  "parentId": 10,
  "name": "燕园街道",
  "level": 3,
  "index": 30
}, {
  "id": 45,
  "parentId": 10,
  "name": "羊坊店街道",
  "level": 3,
  "index": 31
}, {
  "id": 46,
  "parentId": 10,
  "name": "永定路街道",
  "level": 3,
  "index": 32
}, {
  "id": 47,
  "parentId": 10,
  "name": "中关村街道",
  "level": 3,
  "index": 33
}, {
  "id": 48,
  "parentId": 10,
  "name": "紫竹院街道",
  "level": 3,
  "index": 34
}];

console.log($('#test_cascader').cascader({asyncEnable: false, pIdKey: 'parentId'}, options));